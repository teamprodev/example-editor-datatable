#!/usr/bin/python3.7


from bs4 import BeautifulSoup
import requests
import sys
import getopt
import re
from requests.packages import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
import argparse
from os import path
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support import expected_conditions as EC
from selenium.common import exceptions
import time
import datetime
from datetime import datetime

start_time = time.time()

class radportal():
    def setup_method(self):
        if path.exists('/usr/local/bin/chromedriver'):
            chrome = '/usr/local/bin/chromedriver'
        elif path.exists("c:\selenium\chrome\chromedriver.exe"):
            chrome = "c:\selenium\chrome\chromedriver.exe"  # windows location
        elif path.exists("/Users/newander/PycharmProjects/selenium/chrome/chromedriver"):
            chrome = '/Users/newander/PycharmProjects/selenium/chrome/chromedriver'                                          #osx location

        chrome_options = Options()
        chrome_options.add_argument("--headless")
        self.driver = webdriver.Chrome(executable_path=chrome, options=chrome_options)
        self.vars = {}
        self.driver.implicitly_wait(10)
#change this block to alter login credentials===========================================================================
        r = requests.get('https://data.summitrad.net/ted/api/gencredentials_edit.php', auth=('tchang', 'p8599718'), verify=False)
        login_array = r.text.replace('<br>', '\n').split('------------------------')
        for x in login_array:
            try:
                system = x.split('SYSTEM: ')[1].split('\n')[0].strip()

                if system == 'CMC':
                    self.vars['cmc_username'] = x.split('UN: ')[1].split('\n')[0].strip()
                    self.vars['cmc_password'] = x.split('PW: ')[1].split('\n')[0].strip()
                    self.vars['cmc_url'] = x.split('URL_PREFIX: ')[1].split('\n')[0].strip()
                elif system == 'Fairview':
                    self.vars['fph_username'] = x.split('UN: ')[1].split('\n')[0].strip()
                    self.vars['fph_password'] = x.split('PW: ')[1].split('\n')[0].strip()
                    self.vars['fph_url'] = x.split('URL_PREFIX: ')[1].split('\n')[0].strip()
                elif system == 'Piedmont':
                    self.vars['piedmont_username'] = x.split('UN: ')[1].split('\n')[0].strip()
                    self.vars['piedmont_password'] = x.split('PW: ')[1].split('\n')[0].strip()
                    self.vars['piedmont_url'] = x.split('URL_PREFIX: ')[1].split('\n')[0].strip()
                elif system == 'Adventhealth':
                    self.vars['advent_username'] = x.split('UN: ')[1].split('\n')[0].strip()
                    self.vars['advent_password'] = x.split('PW: ')[1].split('\n')[0].strip()
                    self.vars['advent_url'] = x.split('URL_PREFIX: ')[1].split('\n')[0].strip()
                elif system == 'ELFP':
                    self.vars['elp_username'] = x.split('UN: ')[1].split('\n')[0].strip()
                    self.vars['elp_password'] = x.split('PW: ')[1].split('\n')[0].strip()
                    self.vars['elp_url'] = x.split('URL_PREFIX: ')[1].split('\n')[0].strip()

            except:
                pass

        # for x in self.vars:
        #     print(x, ':', self.vars[x])
#=======================================================================================================================

    def teardown_method(self):
        self.driver.quit()

    def wait_for_window(self, timeout=2):
        time.sleep(round(timeout / 1000))
        wh_now = self.driver.window_handles
        wh_then = self.vars["window_handles"]
        if len(wh_now) > len(wh_then):
            return set(wh_now).difference(set(wh_then)).pop()

    def login(self):                                                                                                    #logins in if not already logged in
        self.driver.get(self.vars['url'])
        if (self.driver.title == "Nuance PowerScribeÂ® 360 | Reporting: Sign-In"):
            self.driver.find_element(By.ID, "ctl00_MainHolder_Username").send_keys(self.vars['username'])
            self.driver.find_element(By.ID, "ctl00_MainHolder_Password").send_keys(self.vars['password'])
            self.driver.find_element(By.ID, "ctl00_MainHolder_Submit").click()

    def search_accession(self, accession):                                                                              #puts the accession into the search field and hits seach
        self.driver.find_element(By.ID, "ctl00_MainHolder_QuickSearchPanel_QuickSearchByDDL").click()
        self.driver.find_element(By.ID, "ctl00_MainHolder_QuickSearchPanel_QuickSearchByDDL").send_keys("a")
        self.vars["password"] = len(self.driver.find_elements(By.XPATH, "//input[@id=\'ctl00_MainHolder_Password\']"))
        self.driver.find_element(By.ID, "ctl00_MainHolder_QuickSearchPanel_QuickSearchBy").click()
        self.driver.find_element(By.ID, "ctl00_MainHolder_QuickSearchPanel_QuickSearchBy").clear()
        self.driver.find_element(By.ID, "ctl00_MainHolder_QuickSearchPanel_QuickSearchBy").send_keys(accession)
        while self.driver.find_element(By.ID, "ctl00_MainHolder_QuickSearchPanel_GoQuickSearch_rightLB").text != 'Search':
            time.sleep(.25)

        self.driver.find_element(By.ID, "ctl00_MainHolder_QuickSearchPanel_GoQuickSearch_rightLB").click()

        while self.driver.find_element(By.ID, "ctl00_MainHolder_QuickSearchPanel_GoQuickSearch_rightLB").text == 'Searching...':
            time.sleep(.25)
    def sort_accession(self, accession):                                                                                #takes accession and matches it to the site and sets login info and url
        if accession[0:1].lower() == 'p' or accession[0:3].lower() == 'fwh':
            system = 'piedmont'
            self.vars['url'] = self.vars['piedmont_url']
            self.vars['username'] = self.vars['piedmont_username']
            self.vars['password'] = self.vars['piedmont_password']
        elif accession[0:2].lower() == '03' and accession[3:4].lower() == 'h':
            system = 'advent'
            self.vars['url'] = self.vars['advent_url']
            self.vars['username'] = self.vars['advent_username']
            self.vars['password'] = self.vars['advent_password']
        elif accession[0:5].lower() == 'cocca':
            system = 'cmc'
            self.vars['url'] = self.vars['cmc_url']
            self.vars['username'] = self.vars['cmc_username']
            self.vars['password'] = self.vars['cmc_password']
        elif accession[0:2].lower() == 'fp':
            system = 'fph'
            self.vars['url'] = self.vars['fph_url']
            self.vars['username'] = self.vars['fph_username']
            self.vars['password'] = self.vars['fph_password']
        else:
            system = 'elp'
            self.vars['url'] = self.vars['elp_url']
            self.vars['username'] = self.vars['elp_username']
            self.vars['password'] = self.vars['elp_password']

        data = [system, self.vars['url'], self.vars['username'], self.vars['password']]
        return data


    def get_report(self):
        while True:
            try:
                while len(self.driver.find_elements(By.ID, "ReportPreviewDiv")) < 1:
                    self.driver.find_elements(By.ID, "__tab_ctl00_MainHolder_Tabs_ReportTab").click()
                    time.sleep(.25)
                report = self.driver.find_element_by_id('ReportPreviewDiv').get_attribute('innerText')
                break
            except exceptions.StaleElementReferenceException as e:
                # print(e)
                time.sleep(1)
                # read_extension_phone_number('Stale Element Exception caught')
                pass

        return report

    def addendum(self, text, attending):
        self.vars["parent"] = self.driver.current_window_handle                                                         #saves current window handle to tab between parent and child popups
        draft = self.driver.find_element(By.ID, "ctl00_MainHolder_MyReportsPanel_GetDrafts_rightLB").text               #saves text of number of drafts so it can be used later for wait loop
        WebDriverWait(self.driver, 20).until(
            EC.element_to_be_clickable((By.ID, "__tab_ctl00_MainHolder_Tabs_ReportTab")))
        time.sleep(0.5)
        self.driver.find_element(By.ID, "__tab_ctl00_MainHolder_Tabs_ReportTab").click()
        self.vars["edit"] = len(self.driver.find_elements(By.XPATH, "//a[contains(text(),\'Create Addendum...\')]"))

        if self.driver.execute_script("return (arguments[0] != 0)", self.vars["edit"]):                                 #if create addendum presents continues otherwise it errors.
            self.vars["window_handles"] = self.driver.window_handles

            WebDriverWait(self.driver, 20).until(
                EC.element_to_be_clickable((By.ID, "ctl00_MainHolder_Tabs_ReportTab_ReportCtl_Edit")))
            time.sleep(0.5)
            self.driver.find_element(By.ID, "ctl00_MainHolder_Tabs_ReportTab_ReportCtl_Edit").click()                   #wait then click create addendum

            self.vars["addendum"] = self.wait_for_window(2000)
            time.sleep(0.5)
            self.driver.switch_to.window(self.vars["addendum"])
            self.driver.switch_to.frame(1)                                                                              #waits for pop up then goes to frame with text box, enters text then saves and closes, and tabs to parent window
            self.driver.find_element(By.ID,
                                     "ctl00_MainHolder_ReportTabContainer_ReportEditorPanel_TextEditor").send_keys(text)
            self.driver.find_element(By.ID, "ctl00_MainHolder_SaveButton").click()
            self.driver.switch_to.window(self.vars["parent"])
            WebDriverWait(self.driver, 6000).until(expected_conditions.presence_of_element_located(
                (By.ID, "ctl00_MainHolder_Tabs_ReportTab_ReportCtl_Edit")))
            time.sleep(0.5)
            new_draft = self.driver.find_element(By.ID, "ctl00_MainHolder_MyReportsPanel_GetDrafts_rightLB").text
            while new_draft == draft:                                                                                   #pause for addendum to save before assigning to someone else
                time.sleep(0.5)
                new_draft = self.driver.find_element(By.ID, "ctl00_MainHolder_MyReportsPanel_GetDrafts_rightLB").text
            self.driver.find_element(By.ID, "ctl00_MainHolder_MyReportsPanel_GetDrafts_rightLB").click()
            self.vars["window_handles"] = self.driver.window_handles
            WebDriverWait(self.driver, 20).until(
                EC.element_to_be_clickable((By.ID, "ctl00_MainHolder_Tabs_ReportTab_ReportCtl_ChangeAttending")))       #clicks change attending, switches windows and frames and then switches addendum to correct person and saves
            self.driver.find_element(By.ID, "ctl00_MainHolder_Tabs_ReportTab_ReportCtl_ChangeAttending").click()
            self.vars["attending"] = self.wait_for_window(2000)
            self.driver.switch_to.window(self.vars["attending"])
            self.driver.switch_to.frame(1)

            WebDriverWait(self.driver, 30000).until(
                expected_conditions.element_to_be_clickable((By.ID, "ctl00_MainHolder_AttendingDDL")))
            dropdown = self.driver.find_element(By.ID, "ctl00_MainHolder_AttendingDDL")
            dropdown.find_element(By.XPATH, "//option[. = \'" + attending + "\']").click()
            WebDriverWait(self.driver, 30000).until(
                expected_conditions.element_to_be_clickable((By.ID, "ctl00_MainHolder_SaveAttending")))
            time.sleep(2)
            self.driver.find_element(By.ID, "ctl00_MainHolder_SaveAttending").click()
            self.driver.switch_to.window(self.vars["parent"])                                                           #not really needed

        else:
            print('Addendum already exists. New addendum cannot be made on this study.')                                #error message if addendum exists on study already

    def Change_Attending(self, attending, accession):
        self.driver.find_element(By.ID, "ctl00_MainHolder_QuickSearchPanel_QuickSearchBy").click()
        self.driver.find_element(By.ID, "ctl00_MainHolder_QuickSearchPanel_QuickSearchBy").clear()
        # 7 | type | id=ctl00_MainHolder_QuickSearchPanel_QuickSearchBy | FWH6023486
        self.driver.find_element(By.ID, "ctl00_MainHolder_QuickSearchPanel_QuickSearchBy").send_keys(accession)
        # 8 | click | id=ctl00_MainHolder_QuickSearchPanel_GoQuickSearch_rightLB |
        self.driver.find_element(By.ID, "ctl00_MainHolder_QuickSearchPanel_GoQuickSearch_rightLB").click()
        # 9 | click | id=ctl00_MainHolder_Tabs_ReportTab_ReportCtl_ChangeAttending |
        self.vars["window_handles"] = self.driver.window_handles
        # 10 | storeWindowHandle | root |
        WebDriverWait(self.driver, 30000).until(
            expected_conditions.element_to_be_clickable((By.ID, "ctl00_MainHolder_Tabs_ReportTab_ReportCtl_ChangeAttending")))
        self.driver.find_element(By.ID, "ctl00_MainHolder_Tabs_ReportTab_ReportCtl_ChangeAttending").click()
        # 11 | selectWindow | handle=${win4447} |
        self.vars["win4447"] = self.wait_for_window(2000)
        # 12 | selectFrame | index=1 |
        self.vars["root"] = self.driver.current_window_handle
        # 13 | click | id=ctl00_MainHolder_AttendingDDL |
        self.driver.switch_to.window(self.vars["win4447"])
        # 14 | select | id=ctl00_MainHolder_AttendingDDL | label=Deal, Adam
        self.driver.switch_to.frame(1)
        # 15 | click | id=ctl00_MainHolder_AttendingDDL |
        WebDriverWait(self.driver, 30000).until(
            expected_conditions.element_to_be_clickable((By.ID, "ctl00_MainHolder_AttendingDDL")))
        self.driver.find_element(By.ID, "ctl00_MainHolder_AttendingDDL").click()
        # 16 | click | id=ctl00_MainHolder_SaveAttending |
        dropdown = self.driver.find_element(By.ID, "ctl00_MainHolder_AttendingDDL")
        dropdown.find_element(By.XPATH, "//option[. = \'" + attending + "\']").click()

        # 17 | close |  |
        WebDriverWait(self.driver, 30000).until(
            expected_conditions.element_to_be_clickable((By.ID, "ctl00_MainHolder_AttendingDDL")))
        # time.sleep(3)
        self.driver.find_element(By.ID, "ctl00_MainHolder_AttendingDDL").click()
        # 18 | selectWindow | handle=${root} |
        WebDriverWait(self.driver, 30000).until(
            expected_conditions.element_to_be_clickable((By.ID, "ctl00_MainHolder_SaveAttending")))
        # time.sleep(3)
        self.driver.find_element(By.ID, "ctl00_MainHolder_SaveAttending").click()

        # 19 | click | id=ctl00_Logoff |
        # self.driver.close()
        # 20 | close |  |
        self.driver.switch_to.window(self.vars["root"])
        WebDriverWait(self.driver, 30000).until(
            expected_conditions.element_to_be_clickable((By.ID, "ctl00_MainHolder_QuickSearchPanel_QuickSearchBy")))
        self.driver.find_element(By.ID, "ctl00_MainHolder_QuickSearchPanel_QuickSearchBy").click()
        self.driver.find_element(By.ID, "ctl00_MainHolder_QuickSearchPanel_QuickSearchBy").clear()
        # 7 | type | id=ctl00_MainHolder_QuickSearchPanel_QuickSearchBy | FWH6023486
        time.sleep(5)


        #FUNCTIONS==============================================================================================================
def Get_Rid(base_url, accession, username, password, session):
    #base_url = "https://powerscribe.piedmont.org/RadPortal/"
    
    Explorer_Url = base_url + "services/explorer.asmx"

    payload = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n  <soap:Header>\r\n    <AuthHeader xmlns=\"http://nuance.com/commissure/webservices/explorer/2010/06\">\r\n      <SystemID>0</SystemID>\r\n      <AccessCode></AccessCode>\r\n      <Username>" + username + "</Username>\r\n      <Password>" + password + "</Password>\r\n    </AuthHeader>\r\n  </soap:Header>\r\n  <soap:Body>\r\n    <SearchByAccessionEx xmlns=\"http://nuance.com/commissure/webservices/explorer/2010/06\">\r\n      <accessions>" + accession + "</accessions>\r\n    </SearchByAccessionEx>\r\n  </soap:Body>\r\n</soap:Envelope>"
    headers = {
        'Content-Type': 'text/xml',
    }

    response = requests.request("POST", Explorer_Url, headers=headers, data=payload)

    rid = re.search("<ReportID>(.*)</ReportID>", response.text)
    rid = rid.group(1)

    # signer = re.search("<Signer>(.*)</Signer>", response.text)
    # signer = signer.group(1)
    SignerLastName = re.search("<SignerLastName>(.*)</SignerLastName>", response.text)
    SignerLastName = SignerLastName.group(1)
    try:
        SignerMiddleName = re.search("<SignerMiddleName>(.*)</SignerMiddleName>", response.text)
        SignerMiddleName = SignerMiddleName.group(1)
    except:
        SignerMiddleName = ''
    SignerFirstName = re.search("<SignerFirstName>(.*)</SignerFirstName>", response.text)
    SignerFirstName = SignerFirstName.group(1)
    signer = SignerLastName + ", " + SignerFirstName + " " + SignerMiddleName
    signer = signer.strip()

    addendum = re.search("<IsAddendum>(.*)</IsAddendum>", response.text)
    addendum = addendum.group(1)
    said = Get_Said(base_url, username, password, session, signer)

    # print(rid, signer, said)
    data = [rid, said, addendum]
    print('Looked up accession:', accession,
          '\nThe RID was:', rid,
          '\nThe SAID was:', said,
          '\nThe signer was:', signer,
          '\nWas it an Addendum?:', addendum)
    return data

#Get_Said===============================================================================================================


def Get_Said(base_url, username, password, session, signer):
    login_url = base_url + 'login.aspx'
    r = session.get(login_url)

    loginpage = session.get(r.url)

    soup = BeautifulSoup(loginpage.text, "html.parser")

    # parse and retrieve two vital form values
    viewstate = soup.select("#__VIEWSTATE")[0]['value']
    eventvalidation = soup.select("#__EVENTVALIDATION")[0]['value']

    item_request_body = {
        "ctl00$MainHolder$Username": username,
        "ctl00$MainHolder$Password": password,
        "ctl00$MainHolder$Submit": "Sign in",
        "__VIEWSTATE": viewstate,
        "__EVENTVALIDATION": eventvalidation
    }

    response = session.post(url=r.url, data=item_request_body, headers={"Referer": r.url})

    defaultpage = r.url[:-10] + "/rad/explorer.aspx"

    page = session.get(defaultpage)
    said = BeautifulSoup(page.content, "html.parser")
    # parse Radiologist names
    # radNAME = [i.findAll('option') for i in said.findAll('select', attrs = {'name': 'ctl00$MainHolder$BrowsePanel$RadiologistFilter'} )]
    fullname = signer
    for x in said.find(id="ctl00_MainHolder_BrowsePanel_RadiologistFilter").find_all('option'):
        if fullname in x.get('title'):
            said = x.get('value')
    # print('the SAID is: ', said)
    return said

#ADDEND STUDY===========================================================================================================
def Addend_Study(base_url, rid, said, addendum_text, isAddendum):
    if isAddendum == "True":
        print('addendum already. will addend the addendum')
        addendum_text = '\nAddendum already existed. This is another addendum attempt.'
    addend_url = base_url + 'rad/reportedit.aspx?rid=' + rid + "&said=" + said + "&isAddendum=1"
    addendpage = session.get(addend_url)

    soup = BeautifulSoup(addendpage.text, "html.parser")
    viewstate = soup.select("#__VIEWSTATE")[0]['value']
    eventvalidation = soup.select("#__EVENTVALIDATION")[0]['value']


    item_request_body = {
        "ctl00$MainHolder$SaveButton": "Save and Close",
        "ctl00$MainHolder$ReportTabContainer$ReportEditorPanel$TextEditor": addendum_text,
        "__VIEWSTATE": viewstate,
        "__EVENTVALIDATION": eventvalidation
    }
    response = session.post(url=addendpage.url, data=item_request_body, headers={"Referer": addendpage.url})
    print('addendum made')

    return


##User input with test values FUTURE ARGS===========================================================================================

try:
    parser = argparse.ArgumentParser()
    parser.add_argument("accession", help="study accession")
    parser.add_argument("psr", help="text")
    parser.add_argument("contacted", help="text")

    args = parser.parse_args()

    accession = args.accession
    psr = args.psr
    contacted = args.contacted
    print("ARGS as follows:\nAccession:", accession, "\nPSR:", psr, "\nContacted:", contacted) 
    # evaluate args

except:
    accession = 'FWH6023486'
    psr = 'Chelsea, Seabolt'
    contacted = 'Dr. No'


attending = "Chang, Ted"
accession = 'FWH6023486'
addendum_text = 'The findings of this report were communicated to '
addendum_text += contacted + ' by ' + psr + \
                ' on the behalf of ' + attending + \
                " on " + datetime.now().strftime("on %m/%d/%Y at %H:%M:%S") + \
                '\n\n\n\n(**SRS905412**)'



#PULL CREDENTIALS=======================================================================================================================

p1 = radportal()
p1.setup_method()
data = p1.sort_accession(accession)
system = data[0]
base_url = data[1]
username = data[2]
password = data[3]
# print(base_url, username, password)

session = requests.Session()



# Get RID and SAID===========================================
data = Get_Rid(base_url, accession, username, password, session)
rid = data[0]
said = data[1]
isAddendum = data[2]

#Addend Study==================================================================================================
Addend_Study(base_url, rid, said, addendum_text, isAddendum)
#============================================================================================================
# login
p1.login()
# search for study
print('searching for accession')
p1.search_accession(accession)
# get report
# report = p1.get_report()
# print(report)
# change attending on addendum
print('changing the attending')
p1.Change_Attending(attending, accession)
# close chrome
print('closing chrome')
p1.teardown_method()

# login with kyle or ted info from his api. use that account soap pull the accession
# get the rid
# get the signer
# login to radportal. get said using the signer name, truncate matt's code
# make the addendum. already done
# in same function now change attending to the person who originally signed the report.


print("time elapsed: {:.2f}s".format(time.time() - start_time))
